{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface RemoteStreamerPlugin {\n  play(options: { url: string, enableCommandCenter?: boolean, enableCommandCenterSeek?: boolean }): Promise<void>;\n  pause(): Promise<void>;\n  resume(): Promise<void>;\n  seekTo(options: { position: number }): Promise<void>;\n  stop(): Promise<void>;\n  setVolume(options: { volume: number }): Promise<void>;\n  setPlaybackRate(options: { rate: number }): Promise<void>;\n  setNowPlayingInfo(options: { title: string; artist: string; album: string; duration: string; imageUrl: string; isLiveStream: boolean }): Promise<void>;\n  addListener(\n    eventName: 'play' | 'pause' | 'stop' | 'timeUpdate' | 'buffering' | 'error',\n    listenerFunc: (data: RemoteStreamerEventData) => void\n  ): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n\nexport type RemoteStreamerEventData =\n  | PlayEvent\n  | PauseEvent\n  | StopEvent\n  | TimeUpdateEvent\n  | BufferingEvent\n  | ErrorEvent;\n\nexport interface PlayEvent {\n  type: 'play';\n}\n\nexport interface PauseEvent {\n  type: 'pause';\n}\n\nexport interface StopEvent {\n  type: 'stop';\n}\n\nexport interface TimeUpdateEvent {\n  type: 'timeUpdate';\n  currentTime: number;\n}\n\nexport interface BufferingEvent {\n  type: 'buffering';\n  isBuffering: boolean;\n}\n\nexport interface ErrorEvent {\n  type: 'error';\n  message: string;\n}"]}